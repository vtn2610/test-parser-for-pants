"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
/**
 * Creates a type-safe union, providing: derived types, factories and type-guards in a single declaration.
 */
function createUnion(description) {
    var factories = Object.keys(description).reduce(function (acc, key) {
        var factory = description[key];
        var factoryWithType = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (__assign({ type: key }, factory.apply(null, args)));
        };
        acc[key] = factoryWithType;
        return acc;
    }, {});
    var isCache = {};
    function is(type) {
        if (isCache[type])
            return isCache[type];
        isCache[type] = function (obj) { return obj.type === type; };
        return isCache[type];
    }
    return {
        factories: factories,
        is: is
    };
}
exports.createUnion = createUnion;
function empty() {
    return {};
}
exports.empty = empty;
