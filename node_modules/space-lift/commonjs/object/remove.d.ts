import { ObjectOps } from '../lift';
declare module '../../wrapper' {
    interface ObjectOps<A> {
        remove: typeof remove;
    }
}
export declare type Diff<T extends string | number | symbol, U extends string | number | symbol> = ({
    [P in T]: P;
} & {
    [P in U]: never;
} & {
    [x: string]: never;
})[T];
export declare type Omit<T, K extends keyof T> = {
    [P in Diff<keyof T, K>]: T[P];
};
/**
 * Removes a key/value from this heterogeneous object.
 * To remove a (nullable) key from an object while preserving its type, use "update()" instead.
 * To remove a key from a homogeneous key/value object, use "dissoc" instead.
 */
export declare function remove<A, K extends keyof A, V>(this: ObjectOps<A>, keyToRemove: K): ObjectOps<Omit<A, K>>;
