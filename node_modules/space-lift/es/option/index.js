var _a;
import lift, { getValue } from '../lift';
import { Err, Ok } from '../result';
import { iteratorSymbol, singleValueIterator } from '../iterator';
// The Option factory / static object
var OptionObject = function (value) {
    return isDef(value) ? Some(value) : None;
};
OptionObject.all = function (arr) {
    var values = [];
    for (var i = 0; i < arr.length; i++) {
        var value = arr[i];
        if (Option.isOption(value))
            value = value.get();
        if (!isDef(value))
            return None;
        values.push(value);
    }
    return Some(values);
};
OptionObject.isOption = function (value) {
    return !!value && (value.type === 'some' || value.type === 'none');
};
function makeNone() {
    var self = {};
    function returnNone() { return None; }
    function returnFalse() { return false; }
    self.type = 'none';
    self.Option = OptionObject;
    self.get = function () { return undefined; };
    self.isDefined = returnFalse;
    self.forEach = function () { };
    self.map = returnNone;
    self.flatMap = returnNone;
    self.filter = returnNone;
    self.fold = function (ifEmpty) { return ifEmpty(); };
    self.orElse = function (alt) { return alt(); };
    self.getOrElse = function (alt) { return alt; };
    self.contains = returnFalse;
    self.exists = returnFalse;
    self.toArray = function () { return lift([]); };
    self.toResult = function (ifNone) { return Err(ifNone()); };
    self.toString = function () { return 'None'; };
    self.toJSON = function () { return null; };
    self[iteratorSymbol] = function () {
        return {
            next: function () { return { done: true }; }
        };
    };
    return self;
}
function _Some(value) {
    this.value = value;
}
_Some.prototype = (_a = {
        type: 'some',
        Option: OptionObject,
        get: function () {
            return this.value;
        },
        isDefined: function () {
            return true;
        },
        forEach: function (fn) {
            fn(this.value);
        },
        map: function (fn) {
            return Option(getValue(fn(this.value)));
        },
        flatMap: function (fn) {
            return fn(this.value);
        },
        filter: function (fn) {
            return fn(this.value) ? this : None;
        },
        fold: function (ifEmpty, ifDefined) {
            return ifDefined(this.value);
        },
        orElse: function () {
            return this;
        },
        getOrElse: function () {
            return this.value;
        },
        contains: function (value) {
            return this.value === value;
        },
        exists: function (predicate) {
            return predicate(this.value);
        },
        toArray: function () {
            return lift([this.value]);
        },
        toResult: function () {
            return Ok(this.value);
        },
        toString: function () {
            return "Some(" + this.value + ")";
        },
        toJSON: function () {
            return this.value.toJSON ? this.value.toJSON() : this.value;
        }
    },
    _a[iteratorSymbol] = singleValueIterator(function (self) { return self.value; }),
    _a);
function isDef(value) {
    return value !== null && value !== undefined;
}
export var Option = OptionObject;
/** Creates a new Some instance using a non nullable value */
// extends {} to prevent null and undefined being passed
export function Some(value) {
    return new _Some(value);
}
export var None = makeNone();
