export declare type Fn0<R> = () => R;
export declare type Fn1<A, R> = (a: A) => R;
export declare type Fn2<A, B, R> = (a: A, b: B) => R;
export declare type Fn3<A, B, C, R> = (a: A, b: B, c: C) => R;
export declare type Fn4<A, B, C, D, R> = (a: A, b: B, c: C, d: D) => R;
export interface Options<KeyFn> {
    /** The maximum number of items (one per argument combination) to keep in the cache. Set at 30 by default. */
    cacheSize?: number;
    /** A custom key function used to derivate the caching key from the function arguments */
    key?: KeyFn;
}
export declare function memoize<R>(fun: Fn0<R>): Fn0<R>;
export declare function memoize<A, R>(fun: Fn1<A, R>, options?: Options<Fn1<A, string>>): Fn1<A, R>;
export declare function memoize<A, B, R>(fun: Fn2<A, B, R>, options?: Options<Fn2<A, B, string>>): Fn2<A, B, R>;
export declare function memoize<A, B, C, R>(fun: Fn3<A, B, C, R>, options?: Options<Fn3<A, B, C, string>>): Fn3<A, B, C, R>;
export declare function memoize<A, B, C, D, R>(fun: Fn4<A, B, C, D, R>, options?: Options<Fn4<A, B, C, D, string>>): Fn4<A, B, C, D, R>;
