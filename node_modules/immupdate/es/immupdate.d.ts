/** Performs a shallow update of an object using a partial object of the same shape. A new object is returned. */
export declare function update<Obj extends {}, K extends keyof Obj>(host: Obj, spec: Pick<Obj, K>): Obj;
/** Marker used to delete a key */
export declare const DELETE: undefined;
export declare type Leaf = string | number | boolean | null | symbol | Date | Function;
export declare type OptionContent<Opt extends OptionLike<any>> = Exclude<ReturnType<Opt['get']>, undefined>;
export declare type Updater<TARGET, CURRENT> = [CURRENT] extends [OptionLike<any>] ? ObjectUpdater<TARGET, OptionContent<CURRENT> | undefined> : [CURRENT] extends [any[]] ? ArrayUpdater<TARGET, CURRENT> : [CURRENT] extends [Leaf] ? AnySetter<TARGET, CURRENT> : ObjectUpdater<TARGET, CURRENT>;
export interface ArrayUpdater<TARGET, CURRENT> extends AnyUpdater<TARGET, CURRENT> {
    /**
     * Selects an Array index for update or further at() chaining
     */
    at(index: number): Updater<TARGET, [CURRENT] extends [any[]] ? CURRENT[number & keyof CURRENT] | undefined : never>;
}
export interface ObjectUpdater<TARGET, CURRENT> extends AnyUpdater<TARGET, CURRENT> {
    /**
     * Selects this Object key for update or further at() chaining
     */
    at<K extends keyof CURRENT>(key: K): Updater<TARGET, CURRENT[K]>;
}
export interface AnySetter<TARGET, CURRENT> {
    /**
     * Sets the value at the currently selected path.
     */
    set(value: CURRENT): TARGET;
    /**
     * Modifies the value at the specified path. The current value is passed.
     */
    modify(modifier: (value: CURRENT) => CURRENT): TARGET;
}
export interface AnyUpdater<TARGET, CURRENT> extends AnySetter<TARGET, CURRENT> {
    /**
     * Makes the previous nullable chain level 'safe' by using a default value
     */
    withDefault(defaultValue: CURRENT): Updater<TARGET, NonNullable<CURRENT>>;
    /**
     * Aborts the whole update operation if the previous chain level is null or undefined.
     */
    abortIfUndef(): Updater<TARGET, NonNullable<CURRENT>>;
    /**
     * Aborts the whole update operation if the previous chain level doesn't verify a type guard
     */
    abortIfNot<B extends CURRENT>(predicate: (value: CURRENT) => value is B): Updater<TARGET, B>;
    /**
     * Aborts the whole update operation if the previous chain level doesn't verify a predicate
     */
    abortIfNot(predicate: (value: CURRENT) => boolean): Updater<TARGET, CURRENT>;
}
/**
 * Meant to match space-lift/option, but without requiring a hard (cyclic) dependency.
 */
interface OptionLike<A> {
    get(): A | undefined;
    map<B>(fn: (a: A) => B | null | undefined): OptionLike<B>;
}
export declare function deepUpdate<TARGET>(target: TARGET): Updater<TARGET, TARGET>;
export {};
